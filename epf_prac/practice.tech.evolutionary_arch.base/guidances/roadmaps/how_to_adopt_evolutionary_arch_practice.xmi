<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-KXvzdy6aJTFPQRS-UK5dvA" name="new_roadmap,_Odpz8NciEdy1nJEYZGzN4A" guid="-KXvzdy6aJTFPQRS-UK5dvA" changeDate="2014-02-28T00:11:59.695+0800" version="7.2.0">
  <mainDescription>&lt;h3>&#xD;
    如何开始&amp;nbsp;&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    让团队和关键涉众理解什么是软件架构，以及使用单独工件描述架构的价值。参见概念：&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/software_architecture_59A08DE0.html&quot;&#xD;
    guid=&quot;__O7tAMVvEduLYZUGfgZrkQ&quot;>Software Architecture&lt;/a>。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    在对“应该描述架构信息”达成共识后，需要对期望描述什么架构信息以及其描述的形式达成一致。回顾 &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../practice.tech.evolutionary_arch.base/workproducts/architecture_notebook_9BB92433.html&quot;&#xD;
    guid=&quot;_0XAf0MlgEdmt3adZL5Dmdw&quot;>工件：架构备忘录&lt;/a>&amp;nbsp;及其相关指南。对希望文档化的内容达成一致。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    下一步，回顾 &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/arch_views_viewpoints_7A6CD31.html&quot;&#xD;
    guid=&quot;_kgtcoNc8Edyd7OybSySFxg&quot;>概念：架构视图与视点&lt;/a>&amp;nbsp;和 &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/arch_mechanism_2932DFB6.html&quot;&#xD;
    guid=&quot;_mzxI0A4LEduibvKwrGxWxA&quot;>概念：Architectural Mechanism&lt;/a>。两者对如何定义和沟通架构至关重要。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    现在，可以将团队的注意力转移到如何以及何时执行架构任务。&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        如果是新项目，并且处于生命周期的起点，回顾 &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../practice.tech.evolutionary_arch.base/tasks/envision_the_arch_FF123A81.html&quot;&#xD;
        guid=&quot;_0f-1oMlgEdmt3adZL5Dmdw&quot;>任务：拟制架构&lt;/a>。&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        如果是正在进行中的项目，花些时间记录那些已经制定的决策，并随着开发进展持续完善架构。参见 &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../practice.tech.evolutionary_arch.base/tasks/refine_the_arch_7723A69E.html&quot;&#xD;
        guid=&quot;_0gRJgMlgEdmt3adZL5Dmdw&quot;>任务：完善架构&lt;/a>。&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    常见误区&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    架构工作不应该被孤立的进行，隔着墙将某份架构规范抛给开发人员。这需要过多的文档，并使团队成员难以理解架构为何需要按某种方式工作。成功构建架构是一项需要协作的活动。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    对敏捷项目来说，应避免创建巨细的文档。不要被卷入定义正确的架构备忘录格式应该是什么的陷阱。聚焦于描述关键决策以及这些决策的基本原理。在需要的地方引用更详细的文档，而不要重复描述。保持文档的清晰和简洁。保证那些使用架构的人（开发团队）对架构的形式和内容感到舒适。他们是否还需要看到更多或困难的信息？或是相反，他们需要看到的更少？&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    记录重要的决策。&#xD;
    团队成员可能就在附近，你可以定期和他们沟通，但是团队会变化、软件架构会转移到其它的项目。未能记录的重要决策将在以后引起失败的风险，因为将来的团队成员并无法从当前参与协作的决策中获益。想象一下，作为合作者的未来团队成员，你根本没有机会和他们面对面的交流。&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
