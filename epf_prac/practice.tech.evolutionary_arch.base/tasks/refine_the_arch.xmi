<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="_rUis8LBKEdm7Eph_l9Cn9w" name="refine_the_arch,_0gRJgMlgEdmt3adZL5Dmdw" guid="_rUis8LBKEdm7Eph_l9Cn9w" changeDate="2013-08-04T10:04:13.308+0800" version="1.0.0">
  <mainDescription>&lt;p>&#xD;
    此任务在架构大纲基础上构建架构，并做出具体、明确的决策，以支持开发。它将考虑到目前为止已经开发的所有设计和实现的工件。换句话说，当设计并实现解决方案时演进架构，并更新架构文档以反映开发所产生的变化。这是个关键，因为实际的实现是证明软件架构可行的唯一的“证据”，并为验证架构的适用性提供了明确的依据。更多信息，参见概念：&lt;a&#xD;
     class=&quot;elementLink&quot; href=&quot;./../../core.tech.common.extend_supp/guidances/concepts/executable_arch_D4E68CBD.html&quot;&#xD;
    guid=&quot;_O1kAANvfEduv2KOT-Teh6w&quot;>Executable Architecture&lt;/a>。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    记录结果以被将来参考，并跨团队进行沟通。&#xD;
&lt;/p></mainDescription>
  <keyConsiderations>&lt;p>&#xD;
    通过在一定的抽象层次上持续的降低解决方案的复杂性很重要。更多信息，参见指南：&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.tech.common.extend_supp/guidances/guidelines/abstract_away_complexity_DBF13AE6.html&quot;&#xD;
    guid=&quot;_we3F4ACpEdu8m4dIntu6jA&quot;>Abstract Away Complexity&lt;/a>。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    在完善架构的过程中，持续的同整个团队合作，从而促进对整体解决方案的共识和共同理解。架构师应该协调并指导团队的技术活动，而不是独自完成这些工作。特别强调，在这些任务中应包括开发人员，因为是他们开发了解决方案从而证明了架构，并完善了架构文档。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    确保那些遵照架构工作的人们理解并能够依靠架构进行工作。确保架构描述不仅清晰的表达了解决方案，还包括那些限制了架构的决策相关的动机和目标。这将使架构更容易被理解，并随时间进行调整。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    可以通过许多途径来沟通你所做的决策。例如：&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        发布参考的源代码&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        发布参考的模型&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        发布软件架构文档&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        正式的演讲材料&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        非正式的架构走读&#xD;
    &lt;/li>&#xD;
&lt;/ul></keyConsiderations>
  <sections xmi:id="_l92AYNpaEdyP58ppo1Ieaw" name="完善架构目标和架构关键需求" guid="_l92AYNpaEdyP58ppo1Ieaw">
    <sectionDescription>&lt;p>&#xD;
    同团队一起，特别是利益相关人和需求团队，Review &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.tech.common.extend_supp/guidances/concepts/arch_goals_CB41D8AE.html&quot;&#xD;
    guid=&quot;_HlRqANpbEdyP58ppo1Ieaw&quot;>Architectural Goals&lt;/a>&amp;nbsp;和 &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.tech.common.extend_supp/guidances/concepts/arch_significant_requirements_1EE5D757.html&quot;&#xD;
    guid=&quot;_HrZGIA4MEduibvKwrGxWxA&quot;>Architecturally Significant&#xD;
    Requirements&lt;/a>&amp;nbsp;的状态，并根据需要完善它们。这可能导致出现新的架构关键需求，或者架构的目标和优先级发生变化。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    到当前为止所执行的开发工作也将影响那些已定义的决策和目标。使用那些在当前设计和实现系统时所获得的信息，调整并完善所做的决策和目标。&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_G_k1kBaqEduSTJywppIxVQ" name="识别架构关键设计元素" guid="_G_k1kBaqEduSTJywppIxVQ">
    <sectionDescription>&lt;p align=&quot;left&quot;>&#xD;
    识别具体的设计元素（如&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.tech.common.extend_supp/guidances/concepts/component_CB167D48.html&quot;&#xD;
    guid=&quot;_0YP18MlgEdmt3adZL5Dmdw&quot;>Component&lt;/a>、类和子系统），并为它们命名并给出简要的描述。&#xD;
&lt;/p>&#xD;
&lt;p align=&quot;left&quot;>&#xD;
    以下是一些设计元素的来源：&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;div align=&quot;left&quot;>&#xD;
            &lt;div align=&quot;left&quot;>&#xD;
                &lt;a class=&quot;elementLink&quot;&#xD;
                href=&quot;./../../core.tech.common.extend_supp/guidances/concepts/arch_significant_requirements_1EE5D757.html&quot;&#xD;
                guid=&quot;_HrZGIA4MEduibvKwrGxWxA&quot;>Architecturally Significant Requirements&lt;/a>。突出那些参与架构实现的需求。&#xD;
            &lt;/div>&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div align=&quot;left&quot;>&#xD;
            &lt;div align=&quot;left&quot;>&#xD;
                &lt;a class=&quot;elementLink&quot;&#xD;
                href=&quot;./../../core.tech.common.extend_supp/guidances/concepts/key_abstractions_1474DBF2.html&quot;&#xD;
                guid=&quot;_pLEGUNqGEdy88NBoQgfGyg&quot;>Key Abstractions&lt;/a>&#xD;
            &lt;/div>&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div align=&quot;left&quot;>&#xD;
            封装外部系统接口的组件。更对信息，参见指南：&lt;a class=&quot;elementLink&quot;&#xD;
            href=&quot;./../../core.tech.common.extend_supp/guidances/guidelines/repres_interfaces_to_ext_systems_51A34F6E.html&quot;&#xD;
            guid=&quot;_0gjdYMlgEdmt3adZL5Dmdw&quot;>Representing Interfaces to External Systems&lt;/a>。&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        实现了 &lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../core.tech.common.extend_supp/guidances/concepts/arch_mechanism_2932DFB6.html&quot;&#xD;
        guid=&quot;_mzxI0A4LEduibvKwrGxWxA&quot;>Architectural Mechanism&lt;/a>&amp;nbsp;的组件&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        架构性的和关键设计&lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../core.tech.common.extend_supp/guidances/concepts/pattern_10BE6D96.html&quot;&#xD;
        guid=&quot;_0YJvUMlgEdmt3adZL5Dmdw&quot;>Pattern&lt;/a>。应用所选模式来定义一组符合模式的新的元素。&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    识别组件有助于隐藏系统的复杂性，并帮助你在较高的层次上工作。组件需要具有高内聚，并通过一个受限的接口来提供对外的服务。在此时，接口不需要进行详细的描述，但需要描述它们需要的、可使用的、以及依赖的元素。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    识别组件可基于架构的层次、部署选择、或者关键抽象。问问自己这些问题：&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        哪些是逻辑或功能上相关的（如相同的用例或服务）？&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        哪些实体为他人提供服务？&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        哪些实体彼此依赖？强或弱？&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        哪些实体能够独立的和其它实体进行交互？&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        哪些将运行在同一个进程或网络节点中？&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        哪些部分受到了类似的性能需求的约束？&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    当识别了某个组件时，必须简要的概述分配给该组件的的功能。&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_0qoQ8CikEduQBKSg5n118w" name="完善架构机制" guid="_0qoQ8CikEduQBKSg5n118w">
    <sectionDescription>&lt;p>&#xD;
    完善&lt;a class=&quot;elementLink&quot; href=&quot;./../../core.tech.common.extend_supp/guidances/concepts/arch_mechanism_2932DFB6.html&quot;&#xD;
    guid=&quot;_mzxI0A4LEduibvKwrGxWxA&quot;>Architectural Mechanism&lt;/a>，以支持设计的需要。例如，将某个分析机制完善成相应的设计机制，和/或将设计机制完善成实现机制。&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_82iI0FHOEd2zrOgIte8oWg" name="定义开发架构和测试架构" guid="_82iI0FHOEd2zrOgIte8oWg">
    <sectionDescription>&lt;p>&#xD;
    确保定义了开发和测试架构。注意这些环境中的任何架构关键差异，并和团队一起制定策略来缓解可能出现的风险。&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_Vdln8MP3EdmWKcx6ixEiwg" name="识别更多的重用机会" guid="_Vdln8MP3EdmWKcx6ixEiwg">
    <sectionDescription>&lt;p style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    继续寻找更多的重用已有资产的机会。在合适的情况下，识别可以那些可以构建或使用的已存在的组件。&#xD;
&lt;/p>&#xD;
&lt;p style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    更多信息，参见指南：&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.tech.common.extend_supp/guidances/guidelines/software_reuse_B6B04C26.html&quot;&#xD;
    guid=&quot;_vO2uoO0OEduUpsu85bVhiQ&quot;>Software Reuse&lt;/a>。&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_GFLpsFHPEd2zrOgIte8oWg" name=" 验证架构" guid="_GFLpsFHPEd2zrOgIte8oWg">
    <sectionDescription>&lt;p>&#xD;
    确认架构支持团队的需求和需要。&lt;br />&#xD;
    &lt;br />&#xD;
    开发足够的可工作的软件以展示架构的可行性。这将为架构的适用性验证提供明确的基础。当迭代的开发软件时，可能需要不止一个增量构建来证明架构。在项目的早期阶段，提供不完整或原型感觉的软件是可以接受的，因为此时关注于建立架构基线，以为剩余的开发工作提供一个稳定的基础。&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_xIIVkMUbEdu5GrwIlTJV7g" name="将软件映射到硬件" guid="_xIIVkMUbEdu5GrwIlTJV7g">
    <sectionDescription>&lt;p align=&quot;left&quot;>&#xD;
    将架构关键设计元素映射到目标部署环境。同硬件和网络专家一起，确保硬件充分满足了系统需要，以及在需要时有新的硬件可用。&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_pyyVoFHPEd2zrOgIte8oWg" name="沟通决策" guid="_pyyVoFHPEd2zrOgIte8oWg">
    <sectionDescription>&lt;p>&#xD;
    确保那些遵照架构工作的人们理解并能够依据架构进行工作。确保架构描述不仅仅清晰的描述了解决方案，还包括那些限制了架构的决策相关的动机和目的。这将使架构更容易被理解，并随时间进行调整。&#xD;
&lt;/p></sectionDescription>
  </sections>
  <purpose>&lt;p>&#xD;
    制定并记录支持开发所必要的架构决策。&#xD;
&lt;/p></purpose>
</org.eclipse.epf.uma:TaskDescription>
