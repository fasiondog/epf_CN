<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-5xbLr54QjpynnPU8ZJ3_fw" name="new_concept,_DI_tICNaEdyCq8v2ZO4QcA" guid="-5xbLr54QjpynnPU8ZJ3_fw" changeDate="2013-07-07T00:03:26.829+0800" version="7.5.0">
  <mainDescription>&lt;p>&#xD;
    迭代使团队聚焦于每隔几周通过提交充分测试的、可演示或可交付的Build（产品增量）来交付递增的客户价值。这创建了一个健康的关注点，关注于保证所做的工作都是利益相关人需要的价值。必须比在一个没有迭代的过程中更快的进行决策，因为没有时间进行无休止的争论。迭代开发关注生产工作的代码，减少分析瘫痪的风险。频繁的展示工作代码提供了反馈机制，该机制允许在需要的时候进行纠正活动。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    迭代计划、估算和进度跟踪被集中的工作项里。通过选定高优先级的工作项创建迭代计划。敏捷估算技术有助于理解在固定时间周期的时间盒迭代中可以完成多少合适的工作项，以及过滤工作项确保所选的工作项允许团队交付经利益相关人同意的迭代目标。通过持续的完成许多小的工作项以展示进展（参见：&lt;a&#xD;
     class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../practice.mgmt.iterative_dev.base/guidances/concepts/micro_increments_C8773066.html&quot;&#xD;
    guid=&quot;_S80VwCNbEdyCq8v2ZO4QcA&quot;>微增量&lt;/a>）。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    正如项目经历生命周期，迭代生命周期在不同时间对团队有不同的关注点，依赖于你在迭代的起点还是终点（如下图1所示）。每次迭代通过一个花费数小时时间的迭代计划会议启动。初始的1天或2天通常聚焦于进一步计划和架构等诸如此类的事，理解工作项之间的依赖关系和逻辑顺序，以及工作完成时的架构效果。迭代中的大部分时间花费在执行微增量上。每个微增量需要在一个Build中交付经过测试代码，或经过确认的工件。作为额外的规定，在每周周末产生稳定的Build。花费更多的注意力在这些Build上，以保证质量没有被损坏。尽早的处理问题以保证没有危及到迭代的成功。相对于早期的几周，在迭代的最后一周或最后几天里通常更着重于完善和修复缺陷，即便被加入适当的新特性。我们的目标是永远不要让质量受到侵害，这保证了在每次迭代结束时产生高质量有用的产品增量。迭代在（由利益相关人）评估构建和回顾如何改进下一次迭代中结束。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;b>图1. 一个生命周期的一个迭代，该迭代更加关注于在早期进行计划和架构，更加关注于缺陷修复和稳定的到达终点。&lt;/b>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;img&#xD;
    alt=&quot;Picture shows an iteration that starts with a planning meeting, has stable weekly builds, and ends with an iteration review.&quot;&#xD;
     src=&quot;./resources/iteration_lifecycle.jpg&quot; />&#xD;
&lt;/p>&#xD;
&lt;br />&#xD;
&lt;br /></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
