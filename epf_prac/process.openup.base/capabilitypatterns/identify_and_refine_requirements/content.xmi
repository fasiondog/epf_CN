<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1">
  <org.eclipse.epf.uma:ProcessDescription xmi:id="-yNrF2Ac8VgD0WjoUxGOsIQ" name="identify_and_refine_requirements,_xxcpgdOEEdyqlogshP8l4g" guid="-yNrF2Ac8VgD0WjoUxGOsIQ" version="7.2.0">
    <mainDescription>&lt;p>&#xD;
    此活动描述了收集、确定、分析和验证系统需求的任务，在实现和验证它们之前。这并不意味着在开始实现之前，完成所有需求的细化。而是在整个生命周期中，和利益相关人及整个开发团队协作，确保可用的一个清晰、一致、正确、可验证、灵活的需求集合，从而驱动实现和验证。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    在&lt;strong>初始阶段&lt;/strong>，重点关注获得对待解决的问题的一致认可、收集利益相关人需要、以及捕获高层次的系统特性。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    在&lt;strong>细化阶段&lt;/strong>，重点关注于定义解决方案。包括寻找对利益相关人价值最大的需求，是那些对架构及其重要的需求（它们或者严重影响了架构、或者对架构有重要的风险）。描述这些需求（在工作项列表排序，并将在早期迭代中实现）的足够充分的细节，验证开发团队对需求的理解，从而确保获得利益相关人的同意，并开始软件开发活动。对这些需求中的每一条，定义相关的测试用例，保证需求是可验证的，并为验证和确认提供了指导。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    在&lt;strong>构建阶段&lt;/strong>，重点关注于完善系统定义。包括细化剩余的需求及相关的测试用例，以驱动实现和验证，并管理需求变更。&#xD;
&lt;/p></mainDescription>
  </org.eclipse.epf.uma:ProcessDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-x896fGqISERWysfNwjvB7w" name="system_wide_requirements,_EOwqptOLEdyqlogshP8l4g" guid="-x896fGqISERWysfNwjvB7w">
    <keyConsiderations>&lt;ul>&#xD;
    &lt;li>&#xD;
        当编写系统需求文档时，确保表达了所有的利益相关人需要。特别是，包括那些在交付后负责维护和支持系统的人。&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        通常，全系统需求文档和其他需求工作产品之间存在某些重叠和灰色地带。例如，系统的鉴权行为可以通过用例的方式表达，也可以在全系统需求工件中描述。整体的原则是没有重要需求被遗漏或重复，并有一个约定的捕获和处理需求类型的方法。&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        系统需求来源于许多地方。记录需求的来源很重要，当你区分外部强制性需求时。&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        需求往往被看做“定性”（指定质量或合适的特征）与“定量”（指定数量）的。定性的需求有时会转化为定量的需求。&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        一个好的质量需求应该能够被验证，通过测试或其它客观评估。&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        必须为系统需求评估成本、进度影响，以及对业务目的的贡献水平。基于你的评估，系统需求应该被反复的挑战、防守和修订。&#xD;
    &lt;/li>&#xD;
&lt;/ul></keyConsiderations>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-T_J_cyYgoF4KWAcGQbdjjA" name="glossary,_EOwqqNOLEdyqlogshP8l4g" guid="-T_J_cyYgoF4KWAcGQbdjjA">
    <keyConsiderations>&lt;p>&#xD;
    尽管此工件被当做需求规程里相关任务的输入、输出被列出，但它可以在任何时间、由任何角色进行更新，只要识别出新的术语。在所有的项目文档中使用这些定义的术语，从而使利益相关人可以清晰的看见这些术语被一致的使用。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    在开发此工件时，有一个主要的决策，是使用单一的术语表，还是在多份不同的术语表（业务术语、工件和模型）中进行记录术语。如果它们在多个地方中定义，你需要和团队沟通所有的来源并确定它们的优先顺序。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    这可能很重要，即使在小项目中，引用和使用已存在的广泛术语表、业务术语工件、或数据模型，在它们存在的地方。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    针对行业或组织的术语表可能被引用，并需要遵循特定的标准。&#xD;
&lt;/p></keyConsiderations>
    <refinedDescription>&lt;p>&#xD;
    此工件通过提供两个基础资源帮助避免误解：&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        可供新的开发团队成员查询术语和缩略语的集中的地点&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        在领域内以特定的方式使用的术语定义&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    术语定义有不同的来源，例如需求文档、规格说明，以及和利益相关人、领域专家的讨论。&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-7g1n_R9Eg7zeKCdFrem74A" name="detail_use_case_scenarios,_FX7SINOLEdyqlogshP8l4g" guid="-7g1n_R9Eg7zeKCdFrem74A">
    <keyConsiderations>&lt;p>&#xD;
    为了避免不必要的返工，&amp;nbsp;应该仅安排那些近期需要实现的用例场景（在下一次迭代或下下次）进行细化。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    不是所有的用例场景都需要细化描述。&#xD;
&lt;/p></keyConsiderations>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-snrpmf_Kt0OZ2R7QKJufUQ" name="detail_system_wide_requirements,_F68foNOLEdyqlogshP8l4g" guid="-snrpmf_Kt0OZ2R7QKJufUQ">
    <keyConsiderations>&lt;p>&#xD;
    为了避免不必要的返工，只有那些需要近期实现（在下一次迭代或下下次迭代）的需求必须要细化。&#xD;
&lt;/p></keyConsiderations>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-Afh79qcpEs6i404AABE0rA" name="create_test_cases,_HDOWUNOLEdyqlogshP8l4g" guid="-Afh79qcpEs6i404AABE0rA">
    <keyConsiderations>&lt;p>&#xD;
    与需求并行的开发测试用例，分析人员和利益相关人可以就每条需求需要满足的特定条件达成一致意见。通过实际使用的场景扩大系统的意图，测试用例被当做验收准则。这将运行团队成员通过通过的测试用例来衡量项目进展。&#xD;
&lt;/p></keyConsiderations>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-bQ7hVBwsq2Dzk11CI9pT_g" name="test_case,_HDOWUtOLEdyqlogshP8l4g" guid="-bQ7hVBwsq2Dzk11CI9pT_g">
    <refinedDescription>&lt;p>&#xD;
    测试用例明确了系统必须被验证的条件，以保证通过测试对系统的指定方面进行了评估。测试用例比测试思路更加正式，通常，测试用例有指定的格式。在不那么正式的环境下，可以只创建测试用例，描述唯一的名称标识、名称、相关的测试数据和预期结果。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    驱动测试用例的来源可能很多，通常包含某个需求的子集（如用例集、性能特性、以及可靠性）以及其它类型的质量属性。更多有关测试类型和它们与质量属性的关系，参见概念：&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.tech.common.extend_supp/guidances/concepts/testing_qualitative_rqmts_CAE80710.html&quot;&#xD;
    guid=&quot;_0aJ6cMlgEdmt3adZL5Dmdw&quot;>Testing Qualitative Requirements&lt;/a>。&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-ZvkvSzDnhn7qjyIT-kzCdQ" name="work_items_list,_jrndp-a5EeKxKPHdq3K7Jw" guid="-ZvkvSzDnhn7qjyIT-kzCdQ">
    <keyConsiderations>&lt;p>&#xD;
    工作项应该包含估算。参见指南：&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.mgmt.iterative_dev.base/guidances/guidelines/managing_work_items_32AC6ABD.html&quot;&#xD;
    guid=&quot;_7vEXEMA4EdqSgKaj2SZBmg&quot;>Managing Work Items&lt;/a>&amp;nbsp;和 &lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.mgmt.common.extend_supp/guidances/guidelines/agile_estimation_A4EF42B3.html&quot;&#xD;
    guid=&quot;_CGHskBEdEdqY7JB6N6CW2w&quot;>Agile Estimation&lt;/a>。&#xD;
&lt;/p></keyConsiderations>
    <refinedDescription>&lt;p>&#xD;
    此工件为整个团队提供了一个关注点：&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        提供了针对应用的所有新增或增强功能的请求列表。注意这些请求可能尚未实现或已经实现。&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        提供了项目的所有工作清单，这些工作被排序、估算、分配。排序的风险列表是独立的。&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        为开发团队提供了一处理解将交付什么微增量的地点，通过引用需要的材料执行工作并报告进展。&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    以下是出现在工作项列表里的典型工作项：&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        用例（并引用用例规约）&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        全系统需求&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        变更及增强请求&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        缺陷&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        开发任务&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    工作项可能很大，尤其是增强的请求，如某个个人财务应用中的“支持财务计划”工作项。为了能够在微增量中开发应用，工作项被分析和分解到更小的工作项，这样能够将其分配的某个迭代中，例如某个用例场景“计算网络价值”。进一步的分析可能要求识别合适的任务以分配给开发者，例如“计算网络价值-开发UI界面”。这意味着工作项之间常常存在着父/子关系，那些最底层的工作项则被当做微增量的规格和跟踪设备。&#xD;
&lt;/p></refinedDescription>
  </org.eclipse.epf.uma:DescriptorDescription>
</xmi:XMI>
