<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ArtifactDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-1QQ8ajRx-ZzZnCjhkuaMXQ" name="developer_test,_0YuXEclgEdmt3adZL5Dmdw" guid="-1QQ8ajRx-ZzZnCjhkuaMXQ" changeDate="2013-09-11T21:24:54.080+0800" version="1.0.0">
  <mainDescription>&lt;p>&#xD;
    此工件覆盖了用于验证某个实现元素特定方面的所有步骤。例如，一个测试可以确认某个方法的参数正确接受了要求的最大、最小值。一个开发人员测试指定了测试入口、执行条件和预期的结果。识别这些条件和结果从而评估某个场景的特定方面。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    当你为某个特定的实现元素收集开发人员测试时，你可以验证此元素是否按规格执行。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    这些测试是自我记录的，当测试完成时无论实现元素是否正确运行，结果都清晰可见。&#xD;
&lt;/p></mainDescription>
  <purpose>&lt;p>&#xD;
    此工件用于评估一个实现元素是否按指定的要求实现。&#xD;
&lt;/p></purpose>
  <impactOfNotHaving>&lt;p>&#xD;
    如果没有运行开发人员测试，随着时间的进展无法确保修改的元素随仍能工作。这将阻碍迭代开发和维护。&#xD;
&lt;/p></impactOfNotHaving>
  <reasonsForNotNeeding>&lt;p>&#xD;
    如果能够在产品代码中嵌入测试，那么可以不需要独立的此工作产品。尽管如此，当开发应用软件时，某次层次的开发人员测试支持始终是必要的。&#xD;
&lt;/p></reasonsForNotNeeding>
  <briefOutline>&lt;p>&#xD;
    尽管没有给出此工作产品的预定义模板&amp;nbsp;，并且测试工具会影响如何处理此工作产品，你都应该处理下面的问题：&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        设置（Setup）&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        输入&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        脚本&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        预期结果&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        评估准则&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        清理（Clean-Up)&#xD;
    &lt;/li>&#xD;
&lt;/ul></briefOutline>
  <representationOptions>&lt;p align=&quot;left&quot;>&#xD;
    表示此工作产品的建议和选择：&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    建议：自动化代码单元&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    运行这些测试最合适的技术是使用代码测试实现元素场景，并且在开发过程中更新系统时，你可以定期运行这些测试。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    当代码是这些测试的唯一形式时，确保代码是自记录的。这些代码应该记录测试的指定条件以及测试正确运行所要求的环境设置或退出清理。&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    选择：人工指令&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    在某些情况下，可以使用人工指令。例如，当测试某个用户接口时，开发人员可能执行某个脚本，解释实现元素。在这种情况下，创建一个测试工具直接进入用户接口，仍旧是有价值的。这种方式下，开发人员可以执行脚本而无需执行一系列复杂的指令去找到特定的屏幕或页面。&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    选择：嵌入代码&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    可以使用特定的技术（如Java(TM)5 Test Annotation）将测试嵌入到实现中。在这些情况中，将有一个逻辑的工作产品，但是它被嵌入到被测试的代码中。当选择此方式时，确保代码是自记录的。&#xD;
&lt;/p></representationOptions>
</org.eclipse.epf.uma:ArtifactDescription>
