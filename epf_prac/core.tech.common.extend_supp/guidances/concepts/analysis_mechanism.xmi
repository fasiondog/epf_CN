<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="_S8KCcMP2EdmWKcx6ixEiwg" name="analysis_mechanism,_0gvqoMlgEdmt3adZL5Dmdw" guid="_S8KCcMP2EdmWKcx6ixEiwg" changeDate="2014-03-30T17:35:24.972+0800" version="1.0.0">
  <mainDescription>&lt;p>&#xD;
    分析机制是&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/arch_mechanism_2932DFB6.html&quot;&#xD;
    guid=&quot;_mzxI0A4LEduibvKwrGxWxA&quot;>架构机制&lt;/a>概念性的表示。随着时间发展，分析技术被逐步完善成为&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/design_mechanism_CE197B4E.html&quot;&#xD;
    guid=&quot;_w2ACwA4LEduibvKwrGxWxA&quot;>Design Mechanism&lt;/a>，之后成为&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/implementation_mechanism_C92E670B.html&quot;&#xD;
    guid=&quot;_0LcUkA4LEduibvKwrGxWxA&quot;>Implementation Mechanism&lt;/a>s。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    分析机制使开发者专注于理解需求，而不被实现的复杂性所分心。它们是远离解决方案复杂性的一种抽象方式，这样人们能够更好的理解问题。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    分析机制通过简单的词汇进行描述：&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>名称&lt;/strong>：标识机制&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>基本属性&lt;/strong>：定义机制的需求&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    你可以利用以前的知识自顶向下的识别分析机制；也可以自底向上的识别它们，这意味着你在处理过程中发现了它们。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    在自顶向下模式中，是根据经验进行的——你知道在某些领域中存在的特定问题以及需要的特定的解决方案。例如在分析中，常见的架构问题可以表达为机制：持久存储、事务管理、错误处理、消息、接口引擎。所有这些机制的共同点是它们每一个都是某类广泛系统的通用功能，并且每个机制都提供与基础应用进行交互或支持的功能。分析机制支持系统基本功能要求所需要的功能，而与部署的平台或实现的语言无关。分析机制也能以不同的方式设计和实现。通常，每个分析机制存在多个对应的设计机制。同样的，每个设计机制也有多种不同方式的实现。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    自底向上是分析机制的最后起源地。如你所见，它们起初可能从一系列不同问题的解决方案中隐约浮现。例如：需要提供某种方式为不同线程中的元素同步它们的时钟，以及需要一种资源分配的通用方法。&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/analysis_mechanism_8369C159.html&quot;&#xD;
    guid=&quot;_0gvqoMlgEdmt3adZL5Dmdw&quot;>分析机制&lt;/a>, 从这些模式中简化了分析语言。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    识别某个分析机制意味着你识别了某个通用的、也许隐藏的子问题，并且你给了它一个名称。起初，可能仅仅是个名字。例如，系统需要持久化机制。最后，该机制将通过不同的类之间的协助实现，这些类中的一部分可能并不直接交付应用功能，而仅仅是为应用提供支持。通常这些支持类位于架构的中间层或更低的层次，从而为应用层的类提供公共的支持服务。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    如果识别的子问题足够通用化，那么此机制中可能存在某个可实例化的模式，可根此模式的要求通过绑定已有类或实现某些新类来实例化这个模式。分析模式为这种方式提供了抽象，未来需要通过设计和实现的工作逐步完善。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    你可以在示例中看到如何表示分析机制：&lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.tech.common.extend_supp/guidances/examples/architectural_mechanism_attributes_B0ECA2F7.html&quot;&#xD;
    guid=&quot;_eQ_s8Om5Edupia_tZIXEqg&quot;>示例：Architectural Mechanism Attributes&lt;/a>.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
