<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-UQ_e8kozIP11Xu008RJd-A" name="new_concept,__O7tAMVvEduLYZUGfgZrkQ" guid="-UQ_e8kozIP11Xu008RJd-A" changeDate="2014-03-23T00:00:19.118+0800" version="7.2.0">
  <mainDescription>&lt;h3>&#xD;
    简介&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    软件架构是一个很容易理解的概念，大部分工程师即使仅拥有少量的经验，都能够凭直观感觉理解。但是，它却很难被精确的定义。特别是，很难在设计和架构之间划定清晰的分界线——架构是设计的一个方面，集中于某些特定的特性。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    在《An Introduction to Software Architecture》中，David Garlan和Mary&#xD;
    Shaw建议，软件架构是设计的某个层面，它关注于：“在计算的算法和数据机构之外；设计和特定的整体系统结构暴露出一种新型的问题。结构性问题包括整体组织和全局控制结构；通讯协议，同步以及数据存取；为设计元素分配功能；物理分布；设计元素组合；可扩展性和性能；以及设计方案的选择。”&lt;a&#xD;
     class=&quot;elementlinkwithusertext&quot;&#xD;
    href=&quot;./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html&quot;&#xD;
    guid=&quot;_9ToeIB83Edqsvps02rpOOg&quot;>[GAR93]&lt;/a>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    但是架构比结构包含的更多；IEEE架构工作组将架构定义为“系统在其环境中的最高级别的概念”&lt;a class=&quot;elementlinkwithusertext&quot;&#xD;
    href=&quot;./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html&quot;&#xD;
    guid=&quot;_9ToeIB83Edqsvps02rpOOg&quot;>[IEP1471]&lt;/a>。它还包含了“匹配”系统的完整性，与经济的约束，美学问题，以及风格。它不仅限于一个向内的焦点，还将系统在其用户环境和开发环境中作为一个整体来考虑——向外的焦点。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    架构聚焦于整个系统设计中的特定方面，专注于结构、基本要素、关键场景和那些对系统品质产生持久影响的方面，如性能、可靠性、适应性和成本。它还定义了一组架构机制、模式和风格，这些将指导剩余的设计，保证其完整性。&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    架构用途&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    架构可用于许多方面：&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;strong>描述系统的基本结构以及指导系统结构的决策&lt;/strong>，从而保证系统的完整性和可理解性。&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>识别并降低系统风险&lt;/strong>（通过把架构当做管理中的工件）&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>为开发者提供上下文和指南。&lt;/strong>通过描述架构决策背后的动机，为开发者构造系统提供上下文和指南，从而使这些决策能够被坚定的执行。架构作为蓝图为开发提供服务。例如，架构可以为数据如何被打包及其如何在系统不同部件中通讯指明约束。这看起来像是一种负担，但是在架构备忘录中的理由可以对其给出解释：在和遗留系统通信时存在显著的瓶颈。系统的其余部分必须遵循这种特定的数据打包样式来适应这个瓶颈。&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>为那些必须维护系统的人们，提供系统的概述&lt;/strong>，以及对重要技术决策背后动机的理解。没有参与架构决策的团队成员需要理解架构上下文背后的原因，这样他们能够更好的处理系统需要。&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;strong>定义项目结构和团队组织&lt;/strong>。架构元素是优秀的实现、单元测试、集成、配置管理和文档的单元。它们也可被管理者用于计划项目。&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    架构描述&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    为了讲述和讨论软件架构，首先必须定义架构的表示方式，描述架构的重要方面。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    以下是一些值得捕获的组成软件架构的信息：&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        架构目标 (参见 &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/arch_goals_CB41D8AE.html&quot;&#xD;
        guid=&quot;_HlRqANpbEdyP58ppo1Ieaw&quot;>概念：Architectural Goals&lt;/a>)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        引用关键架构需求以及架构如何处理这些需求，包括描述系统重要行为的关键场景 (参见 &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/arch_significant_requirements_1EE5D757.html&quot;&#xD;
        guid=&quot;_HrZGIA4MEduibvKwrGxWxA&quot;>概念：Architecturally Significant Requirements&lt;/a>)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        架构约束以及架构如何解决这些约束 (参见 &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/arch_constraints_AE56B662.html&quot;&#xD;
        guid=&quot;_jdKSsNpiEdyP58ppo1Ieaw&quot;>概念：Architectural Constraints&lt;/a>)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        关键抽象&amp;nbsp;(参见 &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/key_abstractions_1474DBF2.html&quot;&#xD;
        guid=&quot;_pLEGUNqGEdy88NBoQgfGyg&quot;>概念：Key Abstractions&lt;/a>)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;a class=&quot;elementLink&quot;&#xD;
        href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/arch_mechanism_2932DFB6.html&quot;&#xD;
        guid=&quot;_mzxI0A4LEduibvKwrGxWxA&quot;>Architectural Mechanism&lt;/a> 及其在何处应用 (参见 &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/arch_mechanism_2932DFB6.html&quot;&#xD;
        guid=&quot;_mzxI0A4LEduibvKwrGxWxA&quot;>概念：Architectural Mechanism&lt;/a>).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        描述划分分区的方法，并描述关键部件。例如，分层&amp;nbsp;(参见 &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../core.tech.common.extend_supp/guidances/guidelines/layering_F169CF07.html&quot;&#xD;
        guid=&quot;_0gpkAMlgEdmt3adZL5Dmdw&quot;>指南：Layering&lt;/a>)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        描述部署的方法，以及关键组件如何被分配到部署节点。&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        引用架构关键设计元素 (参见 &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/component_CB167D48.html&quot;&#xD;
        guid=&quot;_0YP18MlgEdmt3adZL5Dmdw&quot;>概念：Component&lt;/a>)&amp;nbsp;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        重要系统接口 (参见 &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../core.tech.common.extend_supp/guidances/guidelines/repres_interfaces_to_ext_systems_51A34F6E.html&quot;&#xD;
        guid=&quot;_0gjdYMlgEdmt3adZL5Dmdw&quot;>指南：Representing Interfaces to External Systems&lt;/a>)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        重用的资产以及开发后能够重用的资产 (更多信息，参见 &lt;a class=&quot;elementLinkWithType&quot;&#xD;
        href=&quot;./../../../core.tech.common.extend_supp/guidances/guidelines/software_reuse_B6B04C26.html&quot;&#xD;
        guid=&quot;_vO2uoO0OEduUpsu85bVhiQ&quot;>指南：Software Reuse&lt;/a>)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        开发者在构建系统时必须遵循的指导、决策、约束及其说明。&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    架构可以包含任何适合于同开发人员沟通应当如何构建系统的信息和引用。&#xD;
&lt;/p>&#xD;
&lt;h4>&#xD;
    Architectural Representation 架构表示方式&#xD;
&lt;/h4>&#xD;
&lt;p>&#xD;
    架构可以有多种形式的表示方法和多个视点，这取决于项目的需要和项目团队的偏好。它并不需要一个正式的文档。架构的本质通常可以通过一系列绘制于白板上的简单图表来沟通；或者是一份决策的清单。架构的说明只需要展示建议的解决方案的本质，传递管理思想，以及主要的构建块，以便更容易的和项目团队及涉众沟通架构。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    如果需要更复杂的系统，那么可以从更多的视点来描述一组更全面的视图来表达架构。更多信息，参见 &lt;a class=&quot;elementLinkWithType&quot;&#xD;
    href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/arch_views_viewpoints_7A6CD31.html&quot;&#xD;
    guid=&quot;_kgtcoNc8Edyd7OybSySFxg&quot;>概念：架构视图与视点&lt;/a>.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    可以通过简单的隐喻或者通过和预定义的架构风格进行比较来表达架构。这也许是一组描述了系统关键要素各个方面的精确的模型或文档。将其表示为骨架实现是另一种选择-虽然这可能需要进行基线并保证对系统本质的理解随着系统的增长而增长。为项目选择最符合项目需要的媒介来表达架构。&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    架构模式&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    架构模式是解决重复出现的架构问题的现成形式。架构框架或架构基础设施（中间件）是可用于构建特定类型架构的一系列组件。许多重要的架构难题应当在框架或基础设施中予以解决，这些难题通常面向特定的领域：命令和控制、管理信息系统、控制系统等。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;a class=&quot;elementlinkwithusertext&quot;&#xD;
    href=&quot;./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html&quot;&#xD;
    guid=&quot;_9ToeIB83Edqsvps02rpOOg&quot;>[BUS96]&lt;/a> 根据系统groups architectural patterns according to the characteristics of the&#xD;
    systems in which they are most applicable, with one category dealing with more general structuring issues. The table&#xD;
    shows the categories presented in &lt;a class=&quot;elementlinkwithusertext&quot;&#xD;
    href=&quot;./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html&quot;&#xD;
    guid=&quot;_9ToeIB83Edqsvps02rpOOg&quot;>[BUS96]&lt;/a> and the patterns they contain.&#xD;
&lt;/p>&#xD;
&lt;div align=&quot;center&quot;>&#xD;
    &lt;table&#xD;
    style=&quot;BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid&quot;&#xD;
     cellspacing=&quot;0&quot; bordercolordark=&quot;#808080&quot; cellpadding=&quot;4&quot; width=&quot;85%&quot; bordercolorlight=&quot;#808080&quot; border=&quot;1&quot;>&#xD;
        &lt;tbody>&#xD;
            &lt;tr>&#xD;
                &lt;th id=&quot;col1&quot; width=&quot;50%&quot;>&#xD;
                    Category 分类&#xD;
                &lt;/th>&#xD;
                &lt;th id=&quot;col2&quot; width=&quot;50%&quot;>&#xD;
                    Pattern 模式&#xD;
                &lt;/th>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;th id=&quot;row2&quot; headers=&quot;col1&quot; rowspan=&quot;3&quot; width=&quot;50%&quot; align=&quot;left&quot;>&#xD;
                    Structure 结构&#xD;
                &lt;/th>&#xD;
                &lt;td headers=&quot;row2 col2&quot; width=&quot;50%&quot;>&#xD;
                    Layers 分层&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td headers=&quot;row2 col2&quot; width=&quot;50%&quot;>&#xD;
                    Pipes and Filters 管道和过滤器&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td headers=&quot;row2 col2&quot; width=&quot;50%&quot;>&#xD;
                    Blackboard 黑板&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;th id=&quot;row3&quot; headers=&quot;col1&quot; width=&quot;50%&quot; align=&quot;left&quot;>&#xD;
                    Distributed Systems 分布式系统&#xD;
                &lt;/th>&#xD;
                &lt;td headers=&quot;row3 col2&quot; width=&quot;50%&quot;>&#xD;
                    Broker 代理&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;th id=&quot;row4&quot; headers=&quot;col1&quot; rowspan=&quot;2&quot; width=&quot;50%&quot; align=&quot;left&quot;>&#xD;
                    Interactive Systems 交互式系统&#xD;
                &lt;/th>&#xD;
                &lt;td headers=&quot;row4 col2&quot; width=&quot;50%&quot;>&#xD;
                    Model-View-Controller 模型-视图-控制器&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td headers=&quot;row4 col2&quot; width=&quot;50%&quot;>&#xD;
                    Presentation-Abstraction-Control 演示-抽象-控制&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;th id=&quot;row5&quot; headers=&quot;col1&quot; rowspan=&quot;2&quot; width=&quot;50%&quot; align=&quot;left&quot;>&#xD;
                    Adaptable Systems 适应性系统&#xD;
                &lt;/th>&#xD;
                &lt;td headers=&quot;row5 col2&quot; width=&quot;50%&quot;>&#xD;
                    Reflection 反射&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
            &lt;tr>&#xD;
                &lt;td headers=&quot;row5 col2&quot; width=&quot;50%&quot;>&#xD;
                    Microkernel 微内核&#xD;
                &lt;/td>&#xD;
            &lt;/tr>&#xD;
        &lt;/tbody>&#xD;
    &lt;/table>&#xD;
    &lt;br />&#xD;
&lt;/div>&#xD;
&lt;p>&#xD;
    参考 &lt;a class=&quot;elementlinkwithusertext&quot;&#xD;
    href=&quot;./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html&quot;&#xD;
    guid=&quot;_9ToeIB83Edqsvps02rpOOg&quot;>[BUS96]&lt;/a> ，获取这些模式的完整信息。&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    &lt;a id=&quot;Architectural Style&quot; name=&quot;Architectural Style&quot;>Architectural Style&lt;/a>架构风格&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    A software architecture (or an architectural view) may have an attribute called &lt;b>architectural style&lt;/b>, which&#xD;
    reduces the set of possible forms to choose from, and imposes a certain degree of uniformity to the architecture. The&#xD;
    style may be defined by a set of patterns, or by the choice of specific components or connectors as the basic building&#xD;
    blocks.&#xD;
&lt;/p>&#xD;
&lt;h3>&#xD;
    Architectural Timing&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    Teams should expect to spend more time on architectural issues early in the project.&amp;nbsp; This allows the team to&#xD;
    reduce risk associated to technology early in the project, hence allowing the team to more rapidly reduce the variance&#xD;
    in their estimate on what they can deliver at what time. Examples of architectural issues that needs to be resolved&#xD;
    early on include the following:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Component and their major interfaces.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Major technology choices (platform, languages, architecture frameworks / reference architectures, etc.).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Interfaces to external systems.&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Common services (persistence mechanisms, logging mechanisms, garbage collection, etc.).&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Key patterns.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h3>&#xD;
    Validating the Architecture验证架构&#xD;
&lt;/h3>&#xD;
&lt;p>&#xD;
    The best way to validate the architecture is to actually implement it.&amp;nbsp; For more information, see &lt;a&#xD;
    class=&quot;elementLink&quot; href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/executable_arch_D4E68CBD.html&quot;&#xD;
    guid=&quot;_O1kAANvfEduv2KOT-Teh6w&quot;>Executable Architecture&lt;/a>.&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
