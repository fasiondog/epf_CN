<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-01L_eCnHjKmBPsGcdk8XTg" name=",_Dq0GQAIoEdyLh7vsrHZ4YA" guid="-01L_eCnHjKmBPsGcdk8XTg" changeDate="2013-09-14T21:09:14.423+0800" version="7.2.0">
  <keyConsiderations>&lt;p>&#xD;
    为了更高效的应用&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.tech.continuous_integration.base/guidances/guidelines/continuous_integration_13C1A8CA.html&quot;&#xD;
    guid=&quot;_i8bUEL6cEdqti4GwqTkbsQ&quot;>Continuous Integration&lt;/a>的实践，集成、构建、测试增量的时间必须足够的短，以便能够在每天多次的执行。变更应该被分解为相对较小的&lt;a&#xD;
    class=&quot;elementLink&quot; href=&quot;./../../core.mgmt.common.extend_supp/guidances/concepts/change_set_430BF233.html&quot;&#xD;
    guid=&quot;_1QU9MAIoEdyLh7vsrHZ4YA&quot;>Change Set&lt;/a>，这些变更集能够被快速的实现、集成并测试。&#xD;
&lt;/p></keyConsiderations>
  <sections xmi:id="_kkZBhZOKEdyaRbFYa4AN4A" name="集成实现元素" guid="_kkZBhZOKEdyaRbFYa4AN4A">
    <sectionDescription>&lt;p>&#xD;
    在相关&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.tech.continuous_integration.base/guidances/concepts/workspace_722BBA90.html&quot;&#xD;
    guid=&quot;_0cEmAMlgEdmt3adZL5Dmdw&quot;>Workspace&lt;/a>中，整合所有不在最近一次基线中的已完成的&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../core.mgmt.common.extend_supp/guidances/concepts/change_set_430BF233.html&quot;&#xD;
    guid=&quot;_1QU9MAIoEdyLh7vsrHZ4YA&quot;>Change Set&lt;/a>。通过删除产生冲突的某个变更集，或者创建合并了冲突工件的新的变更集，来解决任何产生冲突的工件版本。&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_kkZBgpOKEdyaRbFYa4AN4A" name="创建构建" guid="_kkZBgpOKEdyaRbFYa4AN4A">
    <sectionDescription>&lt;p>&#xD;
    创建构建。此步骤的细节依赖于实现的语言、开发环境、并可能涉及编译、链接（在编译语言的情况下）和/或其他处理的结果。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    这些步骤的例子包括：&#xD;
&lt;/p>&#xD;
&lt;ol>&#xD;
    &lt;li>&#xD;
        编译并链接源工件成为可执行程序&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        在测试工作台或模拟器上加载二进制对象&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        运行脚本加载/更新数据库模式&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        打包并部署Web应用&#xD;
    &lt;/li>&#xD;
&lt;/ol></sectionDescription>
  </sections>
  <sections xmi:id="_kkZBhJOKEdyaRbFYa4AN4A" name="测试集成的元素" guid="_kkZBhJOKEdyaRbFYa4AN4A">
    <sectionDescription>&lt;p>&#xD;
    重新运行开发人员测试，验证这些被集成元素的行为是否和独立测试时一样。确保这些测试的范围尽可能的宽广，保证最近的变更集不会引起系统其它区域的开发人员测试出现失败。&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_kkZBg5OKEdyaRbFYa4AN4A" name="运行“冒烟测试”" guid="_kkZBg5OKEdyaRbFYa4AN4A">
    <sectionDescription>&lt;p>&#xD;
    在每次迭代中将创建多个构建。对每个构建，仅当交付的变更集满足了该构建的需求时，执行此步骤。&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    执行系统测试的一个子集，以保证该构建已经适合投入资源开展全范围的系统测试。此层面的测试会有所不同，重点在于获取信心，此增量拥有足够的质量能够为开展系统测试建立基线。&#xD;
&lt;/p></sectionDescription>
  </sections>
  <sections xmi:id="_kkZBgZOKEdyaRbFYa4AN4A" name="使变更可用" guid="_kkZBgZOKEdyaRbFYa4AN4A">
    <sectionDescription>&lt;p>&#xD;
    当成功完成测试并认为此构建“良好”，那么通过&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.tech.continuous_integration.base/guidances/guidelines/promoting_changes_9087B764.html&quot;&#xD;
    guid=&quot;_SM4YIL6dEdqti4GwqTkbsQ&quot;>Promoting&#xD;
    Changes&lt;/a>提交结果，以便其余的团队能够使用该结果。此步骤的细节依赖于使用的配置管理工具，但通常这涉及提交经过测试的变更集到配置库中，从而作为下一次系统增量的开发基础。这是&lt;a class=&quot;elementLink&quot;&#xD;
    href=&quot;./../../practice.tech.continuous_integration.base/guidances/guidelines/continuous_integration_13C1A8CA.html&quot;&#xD;
    guid=&quot;_i8bUEL6cEdqti4GwqTkbsQ&quot;>Continuous Integration&lt;/a>的本质。&#xD;
&lt;/p></sectionDescription>
  </sections>
  <purpose>&lt;p>&#xD;
    此任务的目的是所有开人员所做的所有变更到基础代码中，并为验证此构建对系统增量进行最小化的测试。其目标是尽快的识别问题，从而能够在合适的时间由合适的人更容易的解决它们。&#xD;
&lt;/p></purpose>
</org.eclipse.epf.uma:TaskDescription>
